/*


    1. 如何获取组件的子节点

        props.children


    2. hooks

        2.1 为什么要学习hooks
            因为类组件中有比较难以理解的高阶组件,renderprops,以及this指向问题 
            所以我们未来在开发中,更多的会使用函数组件,但是函数组件没有类组件中的状态和生命周期钩子函数等功能. hooks提供了在函数组件中使用状态和生命周期钩子函数的功能

        2.2. 什么是hooks

                一堆函数,一个hook就是一个函数 

                内置的hooks useState useEffect
                第三方的hooks  useForm 
                自定义的hooks  useXXX

        2.3 有哪些重要的hooks

                useState 作用: 就在函数组件中定义状态,操作状态

                const [状态值, 操作状态的方法] = useState(初始值)
                如果有多个状态,可以调用多次

                useEffect 作用: 在函数组件中,模拟类组件中的生命周期钩子函数

                useEffect(()=>{
                    return ()=>{

                    }
                },[])
                注意点: 
                1. 外层函数默认模拟挂载完成和更新完成
                2. 内部函数模拟组件卸载 
                3. 如果第二个参数不传参数, 外层模拟挂载和更新
                4. 如果第二个参数传入一个空数组, 那么外层只模拟挂载
                5. 如果第二个参数传入一个监听数据,那么数据发生变化的时候,外层函数模拟挂载和更新. 如果数据没有发生变化,只模拟挂载

        2.4 hooks的规则

            1. hooks只能使用在函数组件或其他的hooks中.不能使用在类组件,或普通函数中
            2. hooks应该写在最顶级的作用域,不能写在if.for..这些结构中













*/
